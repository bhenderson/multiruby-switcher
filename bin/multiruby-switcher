#!/usr/bin/env ruby

# some copies from multiruby_setup
require 'rubygems'
require 'multiruby'

ENV.delete 'RUBYOPT'
ARGV << "help" if ARGV.empty?

# switch stdout to fd3. eval will only read from fd1. See 'setup'
FD = STDOUT.dup
begin
  io = IO.for_fd(3)
  io.sync = true
  STDOUT.reopen io
rescue Errno::EBADF, ArgumentError
  # if fd3 is not open, STDOUT will remain unchanged.
end

Multiruby.in_root_dir do
  Multiruby.setup_dirs(false)
end

def Multiruby.installed_versions
  in_install_dir do Dir['*'] end
end

# TODO rename?
def shell(*args) FD.puts(*args) end

def help
  puts <<-EOM

  multiruby-switcher is a script to help you manage multiruby_setup

Usage: #$0 spec

  spec:
    use|list|help|alias|local|<version>

  EOM

  Multiruby.help
end

def replace_path dir = nil
  sep = File::PATH_SEPARATOR
  # remove any previous multiruby from path
  path = ENV['PATH'].split(sep).
           delete_if{|p| p.include? Multiruby.root_dir}
  path.unshift(dir) if dir
  ENV['PATH'] = path.join(sep)
end

def setenv version
  return clearenv if version == 'system' or version.nil?

  bin,dir,gem,ver = nil

  Multiruby.in_install_dir do
    abort "unknown version #{version}" unless test ?e, version
    ver = version
    ver = File.readlink ver if test ?l, ver
    dir = File.join Dir.pwd, ver
    bin = File.join dir, 'bin'
    gem = Dir["#{dir}/lib/ruby/gems/*"].first.to_s
  end

  path = replace_path bin

  shell 'export PATH='              + path
  shell 'export MULTIRUBY_CURRENT=' + ver
  shell 'hash -r' # clear shell hashed locations
  true
end

def clearenv
  shell 'export PATH=' + replace_path
  shell 'unset MULTIRUBY_CURRENT'
  shell 'hash -r' # clear shell hashed locations
end

def set_alias version, name
  Multiruby.in_install_dir do
    # symlink force isn't working
    FileUtils.rm_f name if test ?l, name
    FileUtils.ln_sf version, name
  end
end

def set_local_alias version
  link = File.join Dir.pwd, '.multiruby'
  if test ?l, link
    file = File.readlink link
    unless file == File.expand_path(file, Multiruby.root_dir)
      warn "#{link} already exists and does not link to a multiruby file."
      return
    else
      FileUtils.rm_f link
    end
  end
  Multiruby.in_install_dir do
    vers = File.expand_path(version, Dir.pwd)
    FileUtils.ln_sf vers, link
  end
end

def setup
  file = File.expand_path('~/.bashrc')

  File.open file do |f|
    unless f.grep(/### multiruby ###/).empty?
      puts "Shell function already exists in #{file}"
      return
    end
  end

  # hardcode the ruby path so that this gem is always available at least when
  # running this command. Also unset anyone trying to mess with us.
  puts "Adding shell function to #{file}"
  File.open file, 'a' do |f|

    # eval output. Anything on fd3 will not get eval'd. That's why we
    # switched stdout to it. Then close fd3.
    f.puts <<-EOS.gsub!(/^ */,'')

      ### multiruby ###
      # shell function
      mrs() {
        exec 3>&1
        eval \"$(env -u RUBYOPT -u GEM_HOME -u GEM_PATH #{Gem.ruby} -S multiruby-switcher \"$@\")\"
        exec 3>&-
      }
      # tab completion function
      _mrs() {
        local cur=${COMP_WORDS[COMP_CWORD]}
        COMPREPLY=( $( compgen -W 'use list local setup alias `ls #{Multiruby.in_install_dir do Dir.pwd end}`' -- $cur ) )
      }
      complete -F _mrs -f mrs
      if test -L .multiruby; then
        default=$(readlink .multiruby | xargs basename)
      else
        default=default
      fi
      mrs use default
      ### multiruby ###
    EOS
  end
end

ARGV.each_with_index do |spec, index|
  case spec
  when "-h", "--help", "help" then
    help
    break
  when *Multiruby.installed_versions then
    setenv spec
    break
  # 1.9.1 doesn't install but I don't care. I can see why Ryan might not want
  # to update the_usual to use VERSIONS to allow customization.
  # when "the_usual" then # TODO: update #help
  when 'use' then
    # spec maybe wrong
    setenv ARGV[index+1]
    break
  when 'alias' then
    version, name = ARGV[index+1,2]
    fatal 'version and name are required' unless version and name
    set_alias version, name
    break
  when 'local' then
    version = ARGV[index+1] || ENV['MULTIRUBY_CURRENT']
    set_local_alias version
    break
  when 'setup' then
    setup
  else # fall back to multiruby_setup
    ARGV.replace ARGV[index..-1] || []
    load Gem.bin_path('ZenTest', 'multiruby_setup')
  end
end
